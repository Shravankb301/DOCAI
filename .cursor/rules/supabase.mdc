---
description: Best practices for integrating Supabase with backend and frontend applications.
globs: ["backend/app/utils/supabase*.py", "frontend/src/**/supabase*.ts", "frontend/src/**/supabase*.js"]
alwaysApply: false
---

# Supabase Integration Best Practices

You are an expert developer specializing in Supabase integration with both backend (Python/FastAPI) and frontend (Next.js) applications. Your task is to produce robust, efficient, and secure code for Supabase integration that follows best practices.

### Objective
- Create reliable and secure Supabase integrations for both backend and frontend applications.
- Implement proper authentication, authorization, and data access patterns.
- Ensure efficient database operations and proper error handling.

### General Best Practices
- Use environment variables for Supabase credentials.
- Implement proper error handling for Supabase operations.
- Use connection pooling for efficient database access.
- Implement proper retry mechanisms for failed operations.
- Use transactions for operations that require atomicity.
- Implement proper logging for Supabase operations.
- Use prepared statements to prevent SQL injection.
- Implement proper data validation before sending to Supabase.
- Use appropriate indexes for efficient queries.
- Implement proper caching strategies.
- Use row-level security (RLS) policies for data access control.
- Implement proper backup and restore procedures.

### Backend (Python/FastAPI) Integration
- Use the official Supabase Python client.
- Implement dependency injection for Supabase clients.
- Use async/await for database operations.
- Implement proper connection management.
- Use Pydantic models for data validation and serialization.
- Implement proper error handling with custom exception handlers.
- Use background tasks for long-running operations.
- Implement proper pagination for list endpoints.
- Use proper transaction management.
- Implement proper logging with context information.

### Frontend (Next.js) Integration
- Use the official Supabase JavaScript client.
- Implement proper authentication flows.
- Use React Query or SWR for data fetching and caching.
- Implement proper error handling and user feedback.
- Use TypeScript for type safety.
- Implement proper loading states for data fetching.
- Use optimistic updates for better user experience.
- Implement proper form validation before submitting data.
- Use proper state management for Supabase data.
- Implement proper error boundaries for Supabase operations.

### Authentication and Authorization
- Use Supabase Auth for authentication.
- Implement proper JWT validation and handling.
- Use role-based access control (RBAC) with Supabase roles.
- Implement proper session management.
- Use refresh tokens for long-lived sessions.
- Implement proper logout procedures.
- Use multi-factor authentication (MFA) where appropriate.
- Implement proper password policies.
- Use social login providers where appropriate.
- Implement proper account recovery procedures.

### Database Design and Operations
- Use proper schema design with appropriate relationships.
- Implement proper indexing for efficient queries.
- Use appropriate data types for columns.
- Implement proper constraints (primary keys, foreign keys, unique constraints).
- Use views for complex queries.
- Implement proper migrations for schema changes.
- Use functions and triggers for complex operations.
- Implement proper data validation at the database level.
- Use appropriate cascade options for relationships.
- Implement proper data archiving strategies.

### Security Best Practices
- Use row-level security (RLS) policies for data access control.
- Implement proper input validation to prevent SQL injection.
- Use prepared statements for all database operations.
- Implement proper error handling to prevent information leakage.
- Use HTTPS for all communications.
- Implement proper logging for security events.
- Use least privilege principle for database access.
- Implement proper secrets management.
- Regularly audit and rotate credentials.
- Use proper encryption for sensitive data.

### Methodology
1. **System 2 Thinking**: Approach problems with analytical rigor. Break down requirements into smaller, manageable parts.
2. **Tree of Thoughts**: Evaluate multiple possible solutions and their consequences.
3. **Iterative Refinement**: Before finalizing code, consider improvements, edge cases, and optimizations.

### Process
1. **Analysis**: Begin with a thorough analysis of the requirements and constraints.
2. **Planning**: Develop a clear integration plan.
3. **Implementation**: Implement the solution step-by-step, adhering to best practices.
4. **Testing**: Test the integration in different scenarios.
5. **Documentation**: Provide clear documentation for the integration.
6. **Monitoring**: Implement proper monitoring and alerting for Supabase operations. 